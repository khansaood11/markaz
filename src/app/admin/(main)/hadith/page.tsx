'use client';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Calendar as CalendarIcon, Loader2, Sparkles } from 'lucide-react';
import { useEffect, useState } from 'react';
import { getHadithForDate, updateHadith } from '@/app/admin/actions';
import { format } from 'date-fns';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { cn } from '@/lib/utils';
import { Calendar } from '@/components/ui/calendar';
import { generateDailyHadith, type DailyHadithOutput } from '@/ai/flows/daily-hadith';

type HadithLanguages = {
  arabic: string;
  urdu: string;
  english: string;
  hindi: string;
};

export default function HadithPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const [date, setDate] = useState<Date>(new Date());
  const [hadith, setHadith] = useState<HadithLanguages>({
    arabic: '',
    urdu: '',
    english: '',
    hindi: '',
  });
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function fetchHadith() {
      setIsLoading(true);
      const dateId = format(date, 'yyyy-MM-dd');
      const fetchedHadith = await getHadithForDate(dateId);
      setHadith({
        arabic: (fetchedHadith.arabic as string) || '',
        urdu: (fetchedHadith.urdu as string) || '',
        english: (fetchedHadith.english as string) || '',
        hindi: (fetchedHadith.hindi as string) || '',
      });
      setIsLoading(false);
    }
    fetchHadith();
  }, [date]);
  
  const handleHadithChange = (lang: keyof HadithLanguages, value: string) => {
    setHadith(prev => ({...prev, [lang]: value}));
  }

  const handleGenerate = async () => {
    setIsGenerating(true);
    try {
      const result = await generateDailyHadith();
      setHadith(result);
      toast({
        title: 'Hadith Generated',
        description: 'A new Hadith has been generated by the AI.',
      });
    } catch (error) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: 'Failed to generate Hadith from AI.',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSubmit = async (
    event: React.FormEvent<HTMLFormElement>
  ) => {
    event.preventDefault();
    setIsSubmitting(true);

    const formData = new FormData();
    formData.append('dateId', format(date, 'yyyy-MM-dd'));
    formData.append('arabic', hadith.arabic);
    formData.append('urdu', hadith.urdu);
    formData.append('english', hadith.english);
    formData.append('hindi', hadith.hindi);
    
    const result = await updateHadith(formData);

    setIsSubmitting(false);

    if (result.success) {
      toast({
        title: 'Success',
        description: result.message,
      });
    } else {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: result.message,
      });
    }
  };

  return (
    <div className="p-4 sm:p-6 space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Daily Hadith</h1>
        <p className="text-muted-foreground mt-1">
          Manage the Hadith of the Day. If you leave all fields blank for a specific date, the AI will automatically generate one on the homepage.
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Manage Daily Hadith</CardTitle>
          <CardDescription>
            Select a date to set a specific Hadith. You can also use the AI to generate one for you.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant={'outline'}
                  className={cn(
                    'w-full sm:w-[280px] justify-start text-left font-normal',
                    !date && 'text-muted-foreground'
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, 'PPP') : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={newDate => newDate && setDate(newDate)}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
          </div>
          {isLoading ? (
            <div className="flex justify-center items-center h-40">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div className="space-y-2">
                        <Label htmlFor="hadith-arabic">Arabic</Label>
                        <Textarea
                          id="hadith-arabic"
                          name="arabic"
                          value={hadith.arabic}
                          onChange={(e) => handleHadithChange('arabic', e.target.value)}
                          rows={4}
                          placeholder="Enter Arabic text..."
                          dir="rtl"
                          className='font-arabic'
                        />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="hadith-urdu">Urdu</Label>
                        <Textarea
                          id="hadith-urdu"
                          name="urdu"
                          value={hadith.urdu}
                          onChange={(e) => handleHadithChange('urdu', e.target.value)}
                          rows={4}
                          placeholder="Enter Urdu text..."
                          dir="rtl"
                          className='font-arabic'
                        />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="hadith-english">English</Label>
                        <Textarea
                          id="hadith-english"
                          name="english"
                          value={hadith.english}
                          onChange={(e) => handleHadithChange('english', e.target.value)}
                          rows={4}
                          placeholder="Enter English text..."
                        />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="hadith-hindi">Hindi</Label>
                        <Textarea
                          id="hadith-hindi"
                          name="hindi"
                          value={hadith.hindi}
                          onChange={(e) => handleHadithChange('hindi', e.target.value)}
                          rows={4}
                          placeholder="Enter Hindi text..."
                        />
                    </div>
                </div>
              <div className='flex flex-col sm:flex-row gap-2'>
                <Button type="submit" disabled={isSubmitting || isGenerating}>
                  {isSubmitting && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Save Hadith for {format(date, 'MMM do')}
                </Button>
                <Button type="button" variant="outline" onClick={handleGenerate} disabled={isSubmitting || isGenerating}>
                  {isGenerating ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Sparkles className="mr-2 h-4 w-4" />
                  )}
                  Generate with AI
                </Button>
              </div>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
